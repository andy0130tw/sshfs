diff --git a/Makefile.am b/Makefile.am
index dc859da..6e9b7d0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -33,7 +33,7 @@ handle.h parse.c parse.h queue.c queue.h send.c send.h sftp.h		\
 sftpclient.h sftpcommon.h sftpserver.h status.c thread.h types.h	\
 users.c users.h utils.c utils.h v3.c xfns.c xfns.h stat.c charset.c	\
 charset.h serialize.h serialize.c v4.c realpath.c readlink.c v5.c v6.c	\
-stat.h getcwd.c globals.c dirname.c putword.h
+stat.h getcwd.c globals.c dirname.c putword.h replaced.h
 libsftp_a_LIBADD=$(LIBOBJS)
 
 pwtest_SOURCES=pwtest.c
diff --git a/configure.ac b/configure.ac
index 4de626c..14f3cfa 100644
--- a/configure.ac
+++ b/configure.ac
@@ -45,8 +45,8 @@ RJK_ICONV
 AC_DEFINE([_GNU_SOURCE], [1], [required for e.g. strsignal])
 AC_C_INLINE
 AC_SYS_LARGEFILE
-AC_REPLACE_FUNCS([daemon futimes])
-AC_CHECK_FUNCS([futimesat getaddrinfo prctl])
+AC_REPLACE_FUNCS([daemon futimes utimes futimens utimensat])
+AC_CHECK_FUNCS([getaddrinfo prctl])
 AC_CHECK_DECLS([be64toh, htobe64])
 AC_C_BIGENDIAN
 
diff --git a/futimens.c b/futimens.c
new file mode 100644
index 0000000..ca73831
--- /dev/null
+++ b/futimens.c
@@ -0,0 +1,32 @@
+/*
+ * This file is part of the Green End SFTP Server.
+ * Copyright (C) Richard Kettlewell
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
+ * USA
+ */
+
+#include <config.h>
+#include <errno.h>
+#include "replaced.h"
+
+int futimens(int fd, const struct timespec *times) {
+  struct timeval tv[2];
+  tv[0].tv_sec = times[0].tv_sec;
+  tv[0].tv_usec = times[0].tv_nsec / 1000;
+  tv[1].tv_sec = times[1].tv_sec;
+  tv[1].tv_usec = times[1].tv_nsec / 1000;
+  return futimes(fd, tv);
+}
diff --git a/futimes.c b/futimes.c
index cd86466..98d8d39 100644
--- a/futimes.c
+++ b/futimes.c
@@ -1,6 +1,6 @@
 /*
  * This file is part of the Green End SFTP Server.
- * Copyright (C) 2007 Richard Kettlewell
+ * Copyright (C) Richard Kettlewell
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -19,16 +19,12 @@
  */
 
 #include <config.h>
-#include <sys/time.h>
 #include <errno.h>
+#include "replaced.h"
 
 int futimes(int fd, const struct timeval *times) {
-#if HAVE_FUTIMESAT
-  return futimesat(fd, 0, times);
-#else
   errno = ENOSYS;
   return -1;
-#endif
 }
 
 /*
diff --git a/replaced.h b/replaced.h
new file mode 100644
index 0000000..e596a8a
--- /dev/null
+++ b/replaced.h
@@ -0,0 +1,47 @@
+/*
+ * This file is part of the Green End SFTP Server.
+ * Copyright (C) Richard Kettlewell
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
+ * USA
+ */
+#ifndef REPLACED_H
+#define REPLACED_H 1
+
+#include <fcntl.h>
+#include <sys/time.h>
+
+#ifndef FD_ATCWD
+#  define FD_ATCWD (-100)
+#endif
+
+#if !HAVE_FUTIMENS
+int futimens(int fd, const struct timespec *times);
+#endif
+
+#if !HAVE_UTIMENSAT
+int utimensat(int dirfd, const char *pathname, const struct timespec *times,
+              int flags);
+#endif
+
+#if !HAVE_FUTIMES
+int futimes(int fd, const struct timeval *times);
+#endif
+
+#if !HAVE_UTIMES
+int utimes(const char *filename, const struct timeval *times);
+#endif
+
+#endif
diff --git a/scripts/test-replacements b/scripts/test-replacements
new file mode 100755
index 0000000..b9ebe00
--- /dev/null
+++ b/scripts/test-replacements
@@ -0,0 +1,31 @@
+#!/bin/sh
+#
+# Verify that the AC_REPLACE_FUNCS replacements actually work
+#
+set -e
+
+if [ -e Makefile ]; then
+  make maintainer-clean
+fi
+rm -f xxx_*
+
+FILES="futimens.c utimensat.c configure.ac replaced.h stat.c"
+
+for file in ${FILES}; do
+  git checkout ${file}
+  sed < ${file} > ${file}.new -e 's/futimens/xxx_futimens/g;s/utimensat/xxx_utimensat/g;s/FD_ATCWD/XXX_FD_ATCWD/g;'
+  mv ${file}.new ${file}
+done
+
+mv futimens.c xxx_futimens.c
+mv utimensat.c xxx_utimensat.c 
+
+autoreconf -si
+./configure
+make -j $(nproc)
+make check
+
+for file in ${FILES}; do
+  git checkout ${file}
+done
+rm -f xxx_*
diff --git a/stat.c b/stat.c
index c6db557..24bcd7d 100644
--- a/stat.c
+++ b/stat.c
@@ -34,10 +34,8 @@
 #include <time.h>
 #include <sys/time.h>
 #include <unistd.h>
-
-#if !HAVE_FUTIMES
-int futimes(int fd, const struct timeval *times);
-#endif
+#include <fcntl.h>
+#include "replaced.h"
 
 void sftp_stat_to_attrs(struct allocator *a, const struct stat *sb,
                         struct sftpattr *attrs, uint32_t flags,
@@ -331,27 +329,9 @@ struct sftp_set_status_callbacks {
    * @param tv New times
    * @return 0 on success, -ve on error
    */
-  int (*do_utimes)(const void *what, struct timeval *tv);
+  int (*do_utimens)(const void *what, struct timespec *tv);
 };
 
-/* Horrendous ugliness for SETSTAT/FSETSTAT */
-#ifdef ST_ATIM
-/** @brief Helper macro to set fractional part of timestamps */
-#  define SET_STATUS_NANOSEC                                                   \
-    do {                                                                       \
-      times[0].tv_usec = ((attrs.valid & SSH_FILEXFER_ATTR_ACCESSTIME)         \
-                              ? (long)attrs.atime.nanoseconds                  \
-                              : current.ST_ATIM.tv_nsec) /                     \
-                         1000;                                                 \
-      times[1].tv_usec = ((attrs.valid & SSH_FILEXFER_ATTR_MODIFYTIME)         \
-                              ? (long)attrs.mtime.nanoseconds                  \
-                              : current.ST_MTIM.tv_nsec) /                     \
-                         1000;                                                 \
-    } while(0)
-#else
-#  define SET_STATUS_NANOSEC ((void)0)
-#endif
-
 /** @brief Implementation of sftp_set_status() and sftp_set_fstatus()
  * @param a Allocator
  * @param what Object to modify
@@ -364,7 +344,7 @@ static uint32_t do_sftp_set_status(struct allocator *a, const void *what,
                                    const struct sftpattr *attrsp,
                                    const struct sftp_set_status_callbacks *cb,
                                    const char **whyp) {
-  struct timeval times[2];
+  struct timespec times[2];
   struct stat current;
   struct sftpattr attrs = *attrsp;
   const char *why;
@@ -432,23 +412,21 @@ static uint32_t do_sftp_set_status(struct allocator *a, const void *what,
     times[1].tv_sec = ((attrs.valid & SSH_FILEXFER_ATTR_MODIFYTIME)
                            ? (time_t)attrs.mtime.seconds
                            : current.st_mtime);
-#if ST_ATIM
+#ifdef ST_ATIM
     if(attrs.valid & SSH_FILEXFER_ATTR_SUBSECOND_TIMES) {
-      times[0].tv_usec = ((attrs.valid & SSH_FILEXFER_ATTR_ACCESSTIME)
+      times[0].tv_nsec = ((attrs.valid & SSH_FILEXFER_ATTR_ACCESSTIME)
                               ? (long)attrs.atime.nanoseconds
-                              : current.ST_ATIM.tv_nsec) /
-                         1000;
-      times[1].tv_usec = ((attrs.valid & SSH_FILEXFER_ATTR_MODIFYTIME)
+                              : current.ST_ATIM.tv_nsec);
+      times[1].tv_nsec = ((attrs.valid & SSH_FILEXFER_ATTR_MODIFYTIME)
                               ? (long)attrs.mtime.nanoseconds
-                              : current.ST_MTIM.tv_nsec) /
-                         1000;
+                              : current.ST_MTIM.tv_nsec);
     }
 #endif
-    D(("...utimes to atime %lu.%06lu mtime %lu.%06lu",
-       (unsigned long)times[0].tv_sec, (unsigned long)times[0].tv_usec,
-       (unsigned long)times[1].tv_sec, (unsigned long)times[1].tv_usec));
-    if(cb->do_utimes(what, times) < 0) {
-      *whyp = "utimes";
+    D(("...utimes to atime %lu.%09lu mtime %lu.%09lu",
+       (unsigned long)times[0].tv_sec, (unsigned long)times[0].tv_nsec,
+       (unsigned long)times[1].tv_sec, (unsigned long)times[1].tv_nsec));
+    if(cb->do_utimens(what, times) < 0) {
+      *whyp = "utimens";
       return HANDLER_ERRNO;
     }
   }
@@ -497,13 +475,13 @@ static int name_lstat(const void *what, struct stat *sb) {
  * @param tv New times
  * @return 0 on success, -ve on error
  */
-static int name_utimes(const void *what, struct timeval *tv) {
-  return utimes(what, tv);
+static int name_utimens(const void *what, struct timespec *tv) {
+  return utimensat(AT_FDCWD, what, tv, 0);
 }
 
 /** @brief Table of callbacks for sftp_set_status() */
 static const struct sftp_set_status_callbacks name_callbacks = {
-    name_truncate, name_chown, name_chmod, name_lstat, name_utimes};
+    name_truncate, name_chown, name_chmod, name_lstat, name_utimens};
 
 uint32_t sftp_set_status(struct allocator *a, const char *path,
                          const struct sftpattr *attrsp, const char **whyp) {
@@ -552,13 +530,13 @@ static int fd_stat(const void *what, struct stat *sb) {
  * @param tv New times
  * @return 0 on success, -ve on error
  */
-static int fd_utimes(const void *what, struct timeval *tv) {
-  return futimes(*(const int *)what, tv);
+static int fd_utimens(const void *what, struct timespec *tv) {
+  return futimens(*(const int *)what, tv);
 }
 
 /** @brief Table of callbacks for sftp_set_fstatus() */
 static const struct sftp_set_status_callbacks fd_callbacks = {
-    fd_truncate, fd_chown, fd_chmod, fd_stat, fd_utimes};
+    fd_truncate, fd_chown, fd_chmod, fd_stat, fd_utimens};
 
 uint32_t sftp_set_fstatus(struct allocator *a, int fd,
                           const struct sftpattr *attrsp, const char **whyp) {
diff --git a/utimensat.c b/utimensat.c
new file mode 100644
index 0000000..a4fe01d
--- /dev/null
+++ b/utimensat.c
@@ -0,0 +1,37 @@
+/*
+ * This file is part of the Green End SFTP Server.
+ * Copyright (C) Richard Kettlewell
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
+ * USA
+ */
+
+#include <config.h>
+#include <errno.h>
+#include "replaced.h"
+
+int utimensat(int dirfd, const char *pathname, const struct timespec *times,
+              int flags) {
+  struct timeval tv[2];
+  if(dirfd != AT_FDCWD || flags != 0) {
+    errno = ENOSYS;
+    return -1;
+  }
+  tv[0].tv_sec = times[0].tv_sec;
+  tv[0].tv_usec = times[0].tv_nsec / 1000;
+  tv[1].tv_sec = times[1].tv_sec;
+  tv[1].tv_usec = times[1].tv_nsec / 1000;
+  return utimes(pathname, tv);
+}
diff --git a/utimes.c b/utimes.c
new file mode 100644
index 0000000..961ed6d
--- /dev/null
+++ b/utimes.c
@@ -0,0 +1,37 @@
+/*
+ * This file is part of the Green End SFTP Server.
+ * Copyright (C) Richard Kettlewell
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
+ * USA
+ */
+
+#include <config.h>
+#include <errno.h>
+#include "replaced.h"
+
+int utimes(const char *filename, const struct timeval *times) {
+  errno = ENOSYS;
+  return -1;
+}
+
+/*
+Local Variables:
+c-basic-offset:2
+comment-column:40
+fill-column:79
+indent-tabs-mode:nil
+End:
+*/
